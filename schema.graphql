type Block @entity {
  # Block Hash
  id: ID!

  blockHeight: BigInt!

  timestamp: Date! @index

  events: [Event] @derivedFrom(field: "block")

  extrinsics: [Extrinsic]! @derivedFrom(field: "block")
}

type Event @entity {
  # BlockHeight-EventId
  id: ID!

  module: String! @index

  event: String! @index

  block: Block!

  extrinsic: Extrinsic

  phase: Phase!

  #Vec<Hash>
  topics: [String]!

  #parameters: JSON!
  parameters: String!

  timestamp: Date! @index

  relatedAccounts: [String]!
}

type Phase @jsonField {
  isApplyExtrinsic: Boolean!
  asApplyExtrinsic: BigInt!
  isFinalization: Boolean
  isInitialization: Boolean
}

#type EventAccount @entity {
#  id: ID!
#  event: Event!
#  account: Account!
#  timestamp: Date!
#}

type Extrinsic @entity {

  id: ID!

  module: String! @index

  call: String! @index

  block: Block

  isSuccess: Boolean!

  isSigned: Boolean!

  nonce: Int!

  signature: String!

  signatureType: String!

  version: Int!

  timestamp: Date! @index

  signer: Account

  #   extrinsicV1: ExtrinsicV1 TODO
  #
  #   extrinsicV2: ExtrinsicV2 TODO
  #
  #   extrinsicV3: ExtrinsicV3 TODO
  #
  # TODO, replace back after support union type
  # extra: ExtrinsicExtra
  extra: String!
}

#union ExtrinsicExtra = ExtrinsicV3 | ExtrinsicV4 #TODO, support union type

type ExtrinsicV4 @jsonField {

  # parameters: JSON!
  parameters: String!

  sender: String!

  fee: BigInt!

  tip: BigInt!

  lifetime: [Int]

  # signedExtension: JSONs
  extension: String
}

type ExtrinsicV3 @jsonField {
  #TODO, support generic json type
  # parameters: JSON!
  parameters: String!
  extension: String
}

type Account @entity {
  # Address
  id: ID!

  pubKey: String! @index

  #  subAccounts: [Account] more like subIdentity

  identity: [IdentityHistory]

  # To get the current balance, get the latest AccountBalanceHistory
  balanceHistory: [AccountBalanceHistory]! @derivedFrom(field: "account")

  nextNonce: Int

}

# Store balance changes history
type AccountBalanceHistory @entity {
  # account_id[-asset_id]
  id: ID!

  asset: Asset!

  account: Account!

  freeAmount: BigInt!

  reservedAmount: BigInt!

  feeFrozen: BigInt!

  miscFrozen: BigInt!

  # locked: JSON
  locked: [LockedBalance]

  timestamp: Date! @index
}

type LockedBalance @jsonField {

  id: String # LockIdentifier eg. 0x7374616b696e6720 = 'staking'

  amount: BigInt!

  reasons: String
}

type Asset @entity {
  id: ID!

  symbol: String! @index

  decimal: Int!

  totalIssuance: BigInt!
}

# TODO sub identity
# Store identity changes history
type IdentityHistory @jsonField {

  display: String

  legal: String

  web: String

  riot: String

  email: String

  image: String

  twitter: String

  timestamp: Date!
}

type Transfer @entity {
  # blockHeight+eventId
  id: ID!

  amount: BigInt

  asset: Asset

  to: Account!

  from: Account!

  event: Event!

  timestamp: Date! @index
}

type Era @entity{
  # Era Index
  id: ID!

  startBlock: Int! @index

  endBlock: Int @index
}

type Epoch @entity{
  # Epoch_id
  id: ID!

  startBlock: Int! @index

  endBlock: Int @index
}

type Session @entity{
  # session_id
  id: ID!

  startBlock: Int! @index

  endBlock: Int @index
}
